create table shop (
	id BIGINT PRIMARY KEY,
	name_shop TEXT
);

insert into shop values (1, 'Fanastik');
insert into shop values (2, 'Qveq');
insert into shop values (3, 'Electronik');
insert into shop values (4, 'Neel');
insert into shop values (5, 'Tools');







create table Products (
	id BIGINT PRIMARY KEY,
	name text,
	price float,
        volume float
);

insert into products values (1, 'tablet', 120.99, 0.6);
insert into products values (2, 'video card', 500, 1);
insert into products values(3, 'chair', 10, 5);
insert into products values(4, 'armchair', 50.69, 6.4);
insert into products values(5, 'telephone', 649.49, 0.2);
insert into products values(6, 'mug', 3.57, 0.2);
insert into products values(7, 'keyboard', 84, 0.7);
insert into products values(8, 'toy car', 39, 0.5);
insert into products values(9, 'flash drive', 9.99, 0.1);
insert into products values(10, 'microphone', 54, 0.3);
insert into products values(11, 'battery', 1, 0.1);
insert into products values(12, 'soccer ball', 35.50, 1.3);
insert into products values(13, 'cap', 5.58, 0.3);
insert into products values(14, 'mask', 2.79, 0.2);
insert into products values(15, 'case S-7', 86, 0.2);
insert into products values(16, 'set of tools', 75.99, 1.6);
insert into products values(17, 'humidifier', 73.56, 1.9);
insert into products values(18, 'heater', 46, 4);
insert into products values(19, 'speakers', 56.66, 3.5);
insert into products values(20, 'console', 567.63, 3);
insert into products values(21, 'calendar', 2.59, 0.4);












create table users (
	id BIGINT PRIMARY KEY,
	username TEXT ,
	email varchar (64),
        address VARCHAR(128)
);

INSERT INTO users (id, username, email, address)
VALUES 
    (1, 'ИванИванов', 'ivan@example.com', 'ул. Ленина, 1'),
    (2, 'ДарьяВерхова', 'dariaverkhova@example.com', 'ул. Ленина, 46'),
    (3, 'НиколайЗлотов', 'alexeyivanovich@example.com', 'ул. Декабристов, 11'),
    (4, 'АннастасияТихова', 'annastasiatikhova@example.com', 'ул. Пушкина, 15'),
    (5, 'ЕвгенияНокина', 'evgeniyanokina@example.com', 'ул. Декабристов, 15'),
    (6, 'АлексейМирнов', 'alexeymirnov@example.com', 'ул. Советская, 7'),
    (7, 'ТинаЛитова', 'tinalitova@example.com', 'ул. Володарского, 9'),
    (8, 'ЯнаНиколаева', 'yananikolaeva@example.com', 'пр. Декабристов, 45'),
    (9, 'ЕгорТарин', 'egortarin@example.com', 'ул. Гагарина, 30'),
    (10, 'АлександраНиколаева', 'alexandranikolaeva@example.com', 'ул. Пушкина, 50');













create table pickuppoint (
	id BIGINT PRIMARY KEY,
	warehouse_name TEXT ,
	storage_capacity float
);



insert into pickuppoint values (1, 'ул. Ленина 44', 1000);
insert into pickuppoint values (2, 'ул. Ленина 105', 1000);
insert into pickuppoint values (3, 'ул. Долгова 56', 1000);
insert into pickuppoint values (4, 'ул. Озёрная 12', 1000);
insert into pickuppoint values (5, 'ул. Южная 98', 1000);
insert into pickuppoint values (6, 'ул. Перова 34', 1000);














create table orders (
	id BIGINT PRIMARY KEY,
	orderSum float,
	price float,
	pickuppoint_id INT,
	FOREIGN KEY (pickuppoint_id) REFERENCES pickuppoint(id)
);





create table basket (
	id BIGINT PRIMARY KEY,
	products_id INT,
	FOREIGN KEY (products_id) REFERENCES products(id),
	price float
);

INSERT INTO basket (id, products_id)
VALUES






create table basket_details (
	id BIGINT PRIMARY KEY,
	basket_id INT,
	FOREIGN KEY (basket_id) REFERENCES basket(id),
	products_id INT,
	FOREIGN KEY (products_id) REFERENCES products(id),
	amount float
);








create table checks (
	id BIGINT PRIMARY KEY,
	Sum_order float,
	shop_id INT,
	FOREIGN KEY (shop_id) REFERENCES shop(id),
	orders_id INT,
	FOREIGN KEY (orders_id) REFERENCES orders(id),
	products_id INT,
	FOREIGN KEY (products_id) REFERENCES products(id)
);










create table orderdetails (
	id BIGINT PRIMARY KEY,
	orders_id INT,
	FOREIGN KEY (orders_id) REFERENCES orders(id),
	products_id INT,
	FOREIGN KEY (products_id) REFERENCES products(id)
);







create table profile (
	id BIGINT PRIMARY KEY,
	users_id INT ,
	constraint fk_user_users_id FOREIGN KEY (users_id) REFERENCES users(id),
	basket_id INT,
	constraint fk_basket_basket_id FOREIGN KEY (basket_id) REFERENCES basket(id),
	orders_id INT ,
	constraint fk_orders_orders_id FOREIGN KEY (orders_id) REFERENCES orders(id)
);








CREATE TABLE TRIGGER (
    status VARCHAR(50)
);

INSERT INTO TRIGGER (status)
VALUES
    ('доставлен'),
    ('в сборке'),
    ('отменен');









-- alter table orders add column user_id bigint NOT NULL 
-- alter table orderdetails add column order_date date NOT NULL 
-- insert into orders VALUES (1, 0, 0, 1, 1)
-- alter table orderdetails add column amount int NOT NULL default 1
-- insert into orderdetails values (1, 1, 2, '2023-12-06', 1), (2, 1, 3, '2023-12-06', 2)
-- with order_sum AS (
-- 	SELECT od.orders_id, SUM(od.amount * p.price) FROM orderdetails od
-- 	JOIN products p ON p.id = od.products_id
-- 	GROUP BY od.orders_id
-- )
-- update orders SET ordersum = (SELECT sum from order_sum WHERE orders_id = orders.id)


-- alter table orderdetails drop column order_date

insert into orders VALUES (4, 0, 1, 4, '2023-11-13');
insert into orderdetails VALUES (7, 4, 11, 2), (8, 4, 14, 1);
with order_sum AS (
	SELECT od.orders_id, SUM(od.amount * p.price) FROM orderdetails od
	JOIN products p ON p.id = od.products_id
	GROUP BY od.orders_id
)
update orders SET ordersum = (SELECT sum from order_sum WHERE orders_id = orders.id)









INSERT INTO orders (id, user_id, date, price)
VALUES
    (1, 1, '2023-02-01', 120.99),
    (2, 2, '2023-02-02', 500),
    (3, 3, '2023-02-03', 10),
    (4, 4, '2023-02-04', 50.69),
    (5, 5, '2023-02-05', 649.49),
    (6, 6, '2023-02-06',  649.49),
    (7, 7, '2023-02-07', 75.99),
    (8, 8, '2023-02-08', 56.66),
    (9, 9, '2023-02-09', 9.99),
    (10, 10, '2023-02-10', 75.99),
    (11, 4, '2023-02-11', 35.50),
    (12, 6, '2023-02-12', 35.50),
    (13, 6, '2023-02-13', 86),
    (14, 7, '2023-02-14', 86),
    (15, 3, '2023-02-15', 2.59),
    (16, 3, '2023-02-16', 9.99),
    (17, 8, '2023-02-17', 73.56),
    (18, 9, '2023-02-18', 84),
    (19, 3, '2023-02-19', 5.58),
    (20, 2, '2023-02-20', 46),
    (21, 10, '2023-02-20', 2.59);
































```
SELECT warehouse_name, MAX(storage_capacity) AS max_capacity
FROM pickup_point
GROUP BY warehouse_name
ORDER BY max_capacity DESC;
```



